/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import fileexplorer.FileExplorer;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import pdfbox.gui.pdfview;
import pdfreader.*;
import say.swing.JFontChooser;
/**
 *
 * @author kiran
 */
public class gui extends javax.swing.JFrame {

    /**
     * Creates new form gui
     */
     private final static String newline = "\n";
      public static int c=1;
     public PdfReader reader;
     public String pt;
    public gui(String pat) {
        initComponents();
        pt = pat;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jDialog1 = new javax.swing.JDialog();
        jMenuItem12 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        bgcolor = new javax.swing.JComboBox();
        meanining = new javax.swing.JTextField();
        dict = new javax.swing.JButton();
        screenshot = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        openlib = new javax.swing.JButton();
        display = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jToolBar3 = new javax.swing.JToolBar();
        print = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        zoomout = new javax.swing.JButton();
        jToolBar5 = new javax.swing.JToolBar();
        zoomin = new javax.swing.JButton();
        jToolBar6 = new javax.swing.JToolBar();
        jButton7 = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jTextField2 = new javax.swing.JTextField();
        viewbk = new javax.swing.JButton();
        fontch = new javax.swing.JButton();
        bookmark = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        close = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        jMenuItem5.setText("jMenuItem5");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem12.setText("jMenuItem12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jTextArea1MouseDragged(evt);
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setForeground(new java.awt.Color(153, 153, 153));
        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\kiran\\Downloads\\Search-64.png")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("goto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bgcolor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "CYAN", "PINK" }));
        bgcolor.setToolTipText("");
        bgcolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgcolorActionPerformed(evt);
            }
        });

        meanining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meaniningActionPerformed(evt);
            }
        });

        dict.setText("meaninig");
        dict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dictActionPerformed(evt);
            }
        });

        screenshot.setText("screenshot");
        screenshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenshotActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList1);

        openlib.setText("view shelf");
        openlib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openlibActionPerformed(evt);
            }
        });

        display.setText("view book");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        jToolBar1.setRollover(true);

        jToolBar3.setRollover(true);

        print.setIcon(new javax.swing.ImageIcon("C:\\Users\\kiran\\Documents\\NetBeansProjects\\Reader9\\demos\\viewer\\pdfview\\gfx\\print.gif")); // NOI18N
        print.setFocusable(false);
        print.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        print.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        jToolBar3.add(print);

        jToolBar4.setRollover(true);

        zoomout.setIcon(new javax.swing.ImageIcon("C:\\Users\\kiran\\Documents\\NetBeansProjects\\Reader9\\demos\\viewer\\pdfview\\gfx\\zoomout.gif")); // NOI18N
        zoomout.setFocusable(false);
        zoomout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomoutActionPerformed(evt);
            }
        });
        jToolBar4.add(zoomout);

        jToolBar5.setRollover(true);

        zoomin.setIcon(new javax.swing.ImageIcon("C:\\Users\\kiran\\Documents\\NetBeansProjects\\Reader9\\demos\\viewer\\pdfview\\gfx\\zoomin.gif")); // NOI18N
        zoomin.setFocusable(false);
        zoomin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoominActionPerformed(evt);
            }
        });
        jToolBar5.add(zoomin);

        jToolBar6.setRollover(true);

        jButton7.setText(">");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar6.add(jButton7);

        previous.setText("<");
        previous.setFocusable(false);
        previous.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        previous.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });
        jToolBar6.add(previous);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        viewbk.setText("Get Bookmarks");
        viewbk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbkActionPerformed(evt);
            }
        });

        fontch.setText("fontchooser");
        fontch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontchActionPerformed(evt);
            }
        });

        bookmark.setText("Bookmark");
        bookmark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookmarkActionPerformed(evt);
            }
        });

        jButton3.setText("Go");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        close.setText("CloseBook");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        jMenu1.add(close);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Highlight");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        jMenuItem8.setText("ShowprevHighlights");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, 0));
        jMenuItem9.setText("RemoveHighlight");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("RemoveAllHighlights");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Library");

        jMenuItem2.setText("Add Book");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem2);

        jMenuItem3.setText("Remove Book");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenuItem4.setText("View Books");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem6.setText("Buy Books");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("View");

        jMenuItem11.setText("Read Mode");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem11);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(display)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(openlib)
                                .addGap(88, 88, 88))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(bgcolor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bookmark, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                    .addComponent(viewbk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(1, 1, 1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(screenshot)
                        .addGap(37, 37, 37)
                        .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jToolBar6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(meanining, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dict)
                        .addGap(36, 36, 36)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fontch)
                        .addGap(48, 48, 48))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bookmark, viewbk});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(meanining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dict, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(screenshot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                .addComponent(bgcolor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jToolBar4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jToolBar5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jToolBar6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jToolBar3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fontch, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openlib)
                            .addComponent(display))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(viewbk)
                                .addGap(36, 36, 36)
                                .addComponent(bookmark)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bgcolor, dict, jButton1, jTextField1, jTextField2, meanining, screenshot, search});

        jButton1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
public String fname;
public String par;
public String org;
    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        try {
            File root = new File(pt);
            FileSystemView fsv = new openlibrary( root );
            JFileChooser fc = new JFileChooser(fsv);
            fc.showOpenDialog(null);
            File f=fc.getSelectedFile();
            //
            //JFileChooser chooser = new JFileChooser();
            //chooser.showOpenDialog(open);
            //File f = chooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            par=f.getParent();
            org=f.getName();
            fname = filename;
            System.out.println(filename);
            //File file = new File("filepath.txt");
            Pdfreader pdfread = new Pdfreader();
            String str;
              String str3 = " ";
        String INPUTFILE = filename;    
        
        reader = new PdfReader(INPUTFILE);
        int n = reader.getNumberOfPages();
       jTextArea1.setText("");
       
       String str4=PdfTextExtractor.getTextFromPage(reader, 1);
       jTextArea1.append(str4);
       
      
        
        //Extracting the content from a particular page.
     File file= new File(par+"notes"+org+".txt");
            if(file.exists())
            {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String line = in.readLine();
            while(line != null)
            {
            jTextArea2.append(line + "\n");
            line = in.readLine();
               }
            }
           
        } catch (IOException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        Pdfreader pr= new Pdfreader();
        pr.dellib(pt);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void zoomoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomoutActionPerformed
        // TODO add your handling code here:
         Font font = jTextArea1.getFont();
            float size = font.getSize() - 1.0f;
            jTextArea1.setFont( font.deriveFont(size));
    }//GEN-LAST:event_zoomoutActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int spe=Integer.parseInt(jTextField1.getText());
        jTextArea1.setText(null);
         c = spe;
        
             FileReader pathread = null;
         try {
             pathread = new FileReader("filepath.txt");
         } catch (FileNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
             BufferedReader in = new BufferedReader(pathread);
             String path3 = null;
         try {
             path3 = in.readLine();
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
         try {
             reader = new PdfReader(path3);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        int n = reader.getNumberOfPages();
       
        for(int i=1;i<=c;i++)
        {
       String str4 = null;
            try {
                str4 = PdfTextExtractor.getTextFromPage(reader, i);
            } catch (IOException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
       jTextArea1.append(str4);
       jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
       jTextArea1.append("\n\n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        this.zoomin();
        
    }//GEN-LAST:event_jButton7ActionPerformed

    public void zoomin()
    {
        jTextArea1.setText(null);
        //++c;
        FileReader pathread = null;
         try {
             pathread = new FileReader("filepath.txt");
             
         } catch (FileNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
             BufferedReader in = new BufferedReader(pathread);
             String path3 = fname;
        
         try {
             reader = new PdfReader(path3);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        int n = reader.getNumberOfPages();
        
          c++;
          jTextField2.setText(Integer.toString(c));
         
        System.out.println(c);
        if ( c <=n )
        {
            
        
       String str4 = null;
            try {
                str4 = PdfTextExtractor.getTextFromPage(reader, c);
            } catch (IOException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            
       jTextArea1.append(str4);
       this.highligh();
       //jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
     
        }
        
        else 
        {
            System.out.println("completed");
            
           JOptionPane.showMessageDialog(null, "completed reading");
           JOptionPane.setRootFrame(this);
        }
    }
    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText(null);
        
        
             FileReader pathread = null;
         try {
             pathread = new FileReader("filepath.txt");
         } catch (FileNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
             BufferedReader in = new BufferedReader(pathread);
             String path3 = fname;
         
         try {
             reader = new PdfReader(path3);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        int n = reader.getNumberOfPages();
        
        --c;
        jTextField2.setText(Integer.toString(c));
        
        System.out.println(c);
       if (c>0)
       {
        
       String str4 = null;
            try {            
                str4 = PdfTextExtractor.getTextFromPage(reader, c);
            } catch (IOException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
       jTextArea1.append(str4);
       this.highligh();
       //jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
       jTextArea1.append("\n\n");
       
        }
       
       else 
       {
           JOptionPane.showMessageDialog(null,"Start reading first ! ");
       }
    }//GEN-LAST:event_previousActionPerformed
public void listFilesAndFilesSubDirectories(String directoryName){
        File directory = new File(directoryName);
        String f;
        jList1.setModel(new DefaultListModel());
        File[] fList = directory.listFiles();
        for (File file : fList){
        if (file.isFile()){
        ((DefaultListModel)jList1.getModel()).addElement(file.getName());
        } else if (file.isDirectory()){
        listFilesAndFilesSubDirectories(file.getAbsolutePath());
       }
     }
   }



    private void bgcolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgcolorActionPerformed
        // TODO add your handling code here:
          if(bgcolor.getSelectedItem().toString()=="default")
        {
            jTextArea1.setBackground(Color.white);
        }
        if(bgcolor.getSelectedItem().toString()=="CYAN")
        {
         jTextArea1.setBackground(Color.CYAN);
        }
        if(bgcolor.getSelectedItem().toString()=="PINK")
        {
          jTextArea1.setBackground(Color.PINK);
        }
    }//GEN-LAST:event_bgcolorActionPerformed

    private void dictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dictActionPerformed
        // TODO add your handling code here:
        String text = meanining.getText();
        String str ="";
        dict d=new dict();
        try {
            str=d.Dictionary(text);
            JFrame frame = new JFrame("Show Message Dialog");
            JOptionPane.showMessageDialog(frame,str);
        } catch (IOException ex) {
            Logger.getLogger(dict.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dictActionPerformed

    private void meaniningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meaniningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_meaniningActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        // TODO add your handling code here:
        Pdfreader pr= new Pdfreader();
        try {
            pr.print();
        } catch (PrinterException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printActionPerformed

    private void screenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenshotActionPerformed
        // TODO add your handling code here:
        dict d=new dict();
         try {
             d.snipping();
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_screenshotActionPerformed

    private void zoominActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoominActionPerformed
        // TODO add your handling code here:
         Font font = jTextArea1.getFont();
            float size = font.getSize() + 1.0f;
            jTextArea1.setFont( font.deriveFont(size));
    }//GEN-LAST:event_zoominActionPerformed
 public int start = 1;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // TODO add your handling code here:
        String searc = search.getText();
        if(start==1)
            start = jTextArea1.getText().indexOf(searc);
        
        {  // if found substring, keep doing it
        jTextArea1.select(start, start + searc.length());
        jTextArea1.requestFocus();
        //jTextPane1.req
        start = jTextArea1.getText().indexOf(searc, start+searc.length());
        }
        if(start==-1)
        {
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
       search sc = new search();
       sc.setVisible(true);
       sc.setDefaultCloseOperation(HIDE_ON_CLOSE);
      // setVisible();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void openlibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openlibActionPerformed
        // TODO add your handling code here:
        ;
        
        this.listFilesAndFilesSubDirectories(pt);
    }//GEN-LAST:event_openlibActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // TODO add your handling code here:
          String str7  = jList1.getSelectedValue().toString();
           this.open(str7);
  
        
        
    }//GEN-LAST:event_displayActionPerformed
 public void open(String si)
 {
   
        String path4 = pt+"\\"+si;
        fname = path4;
        Pdfreader pdfread = new Pdfreader();
            String str;
              String str3 = " ";
        String INPUTFILE = fname;    
         try {
             reader = new PdfReader(INPUTFILE);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        int n = reader.getNumberOfPages();
       jTextArea1.setText("");
       
       String str4 = null;
         try {
             str4 = PdfTextExtractor.getTextFromPage(reader, 1);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
       jTextArea1.append(str4);
       
      
        
        //Extracting the content from a particular page.
     File file= new File(par+"notes"+org+".txt");
            if(file.exists())
            {
            try {
                BufferedReader in = null;
                try {
                    in = new BufferedReader(new FileReader(file));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                }
                String line = in.readLine();
                while(line != null)
                {
                jTextArea2.append(line + "\n");
                line = in.readLine();
                   }
            } catch (IOException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
 }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
         try {
             // TODO add your handling code here:
             Pdfreader pr= new Pdfreader();
             pr.openlibrary(pt);
         } catch (InstantiationException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

   
         
   
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        String s=jTextArea2.getText();
       String path=par+"notes"+org+".txt";
       if (s.length()>0)
       {
            try {
                FileOutputStream fs= new FileOutputStream(path);
                byte[] b=s.getBytes();
               try {
                   fs.write(b);
               } catch (IOException ex) {
                   Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
               }
               try {
                   fs.close();
               } catch (IOException ex) {
                   Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
               }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
           
       }
    }//GEN-LAST:event_saveActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
    }//GEN-LAST:event_closeActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void viewbkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbkActionPerformed
         try {           
             File file = new File("username.txt");
             BufferedReader in = null;
              try {
                  in = new BufferedReader(new FileReader(file));
                  
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } 
               user3=in.readLine();
               System.out.println(user3);
             // TODO add your handling code here:
              jList2.setModel(new DefaultListModel());
              System.out.println("MySQL Connect Example.");
       Connection conn = null;
       String url = "jdbc:mysql://localhost:3306/";
       //String dbName = "jdbctutorial";
       String driver = "com.mysql.jdbc.Driver";
       String userName = "root"; 
       String password = "root";
              try {
                  Class.forName(driver).newInstance();
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (InstantiationException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IllegalAccessException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              }
       
       conn = DriverManager.getConnection(url,userName,password);
       System.out.println("Connected to the database");
       Statement st = null;
       st = conn.createStatement();
       st.executeQuery("use reader9db");
       System.out.println(user3);
       System.out.println(org);
        ResultSet rs = st.executeQuery("select distinct bookmarks from bookmarks where username = '"+user3+"'and bookname = '"+org+"'");
       System.out.println(rs);
         while(rs.next())
                  {
                      System.out.println("kiran");
                       int c= Integer.parseInt(rs.getString("bookmarks"));
                       System.out.println(c);
                       ((DefaultListModel)jList2.getModel()).addElement(c);
                  }
          conn.close();    
             
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_viewbkActionPerformed
    public int star;
    public int end;
    private void jTextArea1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseDragged
        // TODO add your handling code here:
        star=jTextArea1.getSelectionStart();
        end=jTextArea1.getSelectionEnd();
        System.out.println("start"+star);
        System.out.println("end"+end);
        
    }//GEN-LAST:event_jTextArea1MouseDragged
    Map<Integer, Highlighter.Highlight> highlights = new HashMap<Integer, Highlighter.Highlight>();
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {                                           
             // TODO add your handling code here:
              File file = new File("username.txt");
             BufferedReader in = null;
              try {
                  in = new BufferedReader(new FileReader(file));
                  
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } 
             String uname=in.readLine();
            
             Highlighter h = jTextArea1.getHighlighter();
              try {
                  
                     h.addHighlight(star, end, DefaultHighlighter.DefaultPainter);
                     Highlighter.Highlight[] highlightIndex = h.getHighlights();
                     highlights.put(star, highlightIndex[highlightIndex.length - 1]);
                 } catch (BadLocationException ex) {
                     Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                 }
               Connection conn = null;
            //  String uname="kiran";
              String pgno= jTextField2.getText();
       String url = "jdbc:mysql://localhost:3306/";
       String dbName = "reader9db";
       String driver = "com.mysql.jdbc.Driver";
       String userName = "root"; 
       String password = "root";
       Class.forName(driver).newInstance();
       
       conn = DriverManager.getConnection(url,userName,password);
       Statement st = conn.createStatement();
       st.executeQuery("use reader9db");
      //  String state =  ("INSERT INTO usersdata VALUES ('" + jTextField2.getText().toString() + "','" +jTextField3.getText().toString() + "','" + jTextField4.getText().toString() + "','"+ jTextField6.getText().toString() +"') ");
      st.executeUpdate("insert into high(username,bookname,start,end,pagenum) values('" + uname.toString() + "','"+ org.toString() +"','"+ star + "','"+ end + "','"+ Integer.parseInt(pgno) + "' )");
       st.close();
              int [] a= new int[2];
              a[0]=star;
              a[1]=end;
              Highlig jt= new Highlig();
             try {
                 jt.writeAccount(a,pt);
                 //jt.writehash(h, star, pt);
             } catch (Exception ex) {
                 Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
             }
       
         } catch (InstantiationException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
  
    }//GEN-LAST:event_jMenuItem7ActionPerformed
   
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        Pdfreader pr = new Pdfreader();
        pr.buybook();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void fontchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontchActionPerformed
        // TODO add your handling code here:
         JFontChooser fontChooser = new JFontChooser();
   int result = fontChooser.showDialog(fontch);
   if (result == JFontChooser.OK_OPTION)
   {
        Font font = fontChooser.getSelectedFont(); 
        System.out.println("Selected Font : " + font); 
        jTextArea1.setFont(font);
   }
    }//GEN-LAST:event_fontchActionPerformed
public String user3;
    private void bookmarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookmarkActionPerformed
         try {
             // TODO add your handling code here:
             
             File file = new File("username.txt");
             BufferedReader in = null;
              try {
                  in = new BufferedReader(new FileReader(file));
                  
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } 
               user3=in.readLine();
               System.out.println(user3);
              createbkmrk cbk = new createbkmrk();
  cbk.createbk(org,c, user3);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        
     
    }//GEN-LAST:event_bookmarkActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         int spe=Integer.parseInt(jList2.getSelectedValue().toString());
        jTextArea1.setText(null);
         c = spe;
        
             FileReader pathread = null;
         try {
             pathread = new FileReader("filepath.txt");
         } catch (FileNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
             BufferedReader in = new BufferedReader(pathread);
             String path3 = null;
         try {
             path3 = in.readLine();
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
         try {
             reader = new PdfReader(path3);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        int n = reader.getNumberOfPages();
       
        
       String str4 = null;
         try {
             str4 = PdfTextExtractor.getTextFromPage(reader, c);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
            
       jTextArea1.append(str4);
       jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
       
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        // TODO add your handling code here:
        int spe=Integer.parseInt(jList2.getSelectedValue().toString());
        jTextArea1.setText(null);
         c = spe;
        
             FileReader pathread = null;
         try {
             pathread = new FileReader("filepath.txt");
         } catch (FileNotFoundException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
             BufferedReader in = new BufferedReader(pathread);
             String path3 = null;
         try {
             path3 = in.readLine();
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
         try {
             reader = new PdfReader(path3);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        int n = reader.getNumberOfPages();
       
        
       String str4 = null;
         try {
             str4 = PdfTextExtractor.getTextFromPage(reader, c);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
            
       jTextArea1.append(str4);
       jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
       
    }//GEN-LAST:event_jList2MouseClicked

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        /*int[] ac;
        Highlig jf= new Highlig();
            try {
                Vector<int[]> ve= jf.look(pt);
                ListIterator iter = ve.listIterator();
                while (iter.hasNext())
			{
				ac = (int[])iter.next();
                                Highlighter h1 = jTextArea1.getHighlighter();
                        try {
                h1.addHighlight(ac[0],ac[1], DefaultHighlighter.DefaultPainter);
            } catch (BadLocationException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
                                //System.out.println("acc"+account[0]);
                                //System.out.println("acc"+account[1]);
                                //g.rehigh(account[0], account[1]);
			}
            } catch (Exception ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }*/
     try {           
             File file = new File("username.txt");
             BufferedReader in = null;
              try {
                  in = new BufferedReader(new FileReader(file));
                  
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } 
               user3=in.readLine();
               System.out.println(user3);
             // TODO add your handling code here:
              jList2.setModel(new DefaultListModel());
              System.out.println("MySQL Connect Example.");
       Connection conn = null;
       String url = "jdbc:mysql://localhost:3306/";
       //String dbName = "jdbctutorial";
       String driver = "com.mysql.jdbc.Driver";
       String userName = "root"; 
       String password = "root";
              try {
                  Class.forName(driver).newInstance();
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (InstantiationException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IllegalAccessException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              }
       
       conn = DriverManager.getConnection(url,userName,password);
       System.out.println("Connected to the database");
       Statement st = null;
       st = conn.createStatement();
       st.executeQuery("use reader9db");
       System.out.println(user3);
       System.out.println(org);
        ResultSet rs = st.executeQuery("select start,end from high where username = '"+user3+"'and bookname = '"+org+"' and pagenum = '"+Integer.parseInt(jTextField2.getText())+"'");
       System.out.println(rs);
         while(rs.next())
                  {
                       System.out.println("kiran");
                       int s= Integer.parseInt(rs.getString("start"));
                       int e= Integer.parseInt(rs.getString("end"));
                       System.out.println(s+"asd"+e);
                        Highlighter h1 = jTextArea1.getHighlighter();
                        try {
                h1.addHighlight(s,e, DefaultHighlighter.DefaultPainter);
            } catch (BadLocationException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
                       //((DefaultListModel)jList2.getModel()).addElement(c);
                  }
          conn.close();    
             
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
        
            
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        Highlighter h2=jTextArea1.getHighlighter();
        h2.removeAllHighlights();
        try {           
             File file = new File("username.txt");
             BufferedReader in = null;
              try {
                  in = new BufferedReader(new FileReader(file));
                  
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } 
               user3=in.readLine();
               System.out.println(user3);
             // TODO add your handling code here:
              jList2.setModel(new DefaultListModel());
              System.out.println("MySQL Connect Example.");
       Connection conn = null;
       String url = "jdbc:mysql://localhost:3306/";
       //String dbName = "jdbctutorial";
       String driver = "com.mysql.jdbc.Driver";
       String userName = "root"; 
       String password = "root";
              try {
                  Class.forName(driver).newInstance();
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (InstantiationException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IllegalAccessException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              }
       
       conn = DriverManager.getConnection(url,userName,password);
       System.out.println("Connected to the database");
       Statement st = null;
       st = conn.createStatement();
       st.executeQuery("use reader9db");
       System.out.println(user3);
       System.out.println(org);
        st.executeUpdate("delete from  high where username = '"+user3+"' and bookname = '"+org+"' and pagenum = '"+Integer.parseInt(jTextField2.getText())+"'" );
       st.close();    
             
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }

    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_EQUALS)
            {
                //System.out.println("Key plus is pressed");
                if (evt.isControlDown())
                {
                    Font f=jTextArea1.getFont();
                    System.out.println(f.getSize());
                    float size=f.getSize()+3.0f;
                    System.out.println(size);
                    jTextArea1.setFont(f.deriveFont(size)); 
                }
            }
           else if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_MINUS)
            {
               // System.out.println("Key minus is pressed");
                if (evt.isControlDown())
                {
                    Font f=jTextArea1.getFont();
                    System.out.println(f);
                    float size=f.getSize()-3.0f;
                    System.out.println(size);
                    jTextArea1.setFont(f.deriveFont(size)); 
                }
            }
           else if (evt.getKeyCode()==java.awt.event.KeyEvent.VK_KP_RIGHT)
           {
               this.zoomin();
           }
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        String input=jTextArea1.getSelectedText();
        
	                if (input != null && (highlights.size() > 0))
	                {
	                    int startIndex = jTextArea1.getText().indexOf(input);
	                    Highlighter highlighter = jTextArea1.getHighlighter();
	                    System.out.println("The position "+startIndex);
	                    highlighter.removeHighlight(highlights.get(startIndex));
	                    jTextArea1.setCaretPosition(startIndex);
	                    jTextArea1.requestFocusInWindow();
	                    highlights.remove(startIndex);
	                }
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
         pdfview pdf3;
         try {
             pdf3 = new pdfview();
             pdf3.pdf1(fname);
             pdf3.setDefaultCloseOperation(HIDE_ON_CLOSE);
             pdf3.setVisible(rootPaneCheckingEnabled);
             
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (com.gnostice.pdfone.PdfException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } 
    }//GEN-LAST:event_jMenuItem11ActionPerformed
      public void highligh()
      {
          try {           
             File file = new File("username.txt");
             BufferedReader in = null;
              try {
                  in = new BufferedReader(new FileReader(file));
                  
              } catch (FileNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } 
               user3=in.readLine();
               System.out.println(user3);
             // TODO add your handling code here:
              jList2.setModel(new DefaultListModel());
              System.out.println("MySQL Connect Example.");
       Connection conn = null;
       String url = "jdbc:mysql://localhost:3306/";
       //String dbName = "jdbctutorial";
       String driver = "com.mysql.jdbc.Driver";
       String userName = "root"; 
       String password = "root";
              try {
                  Class.forName(driver).newInstance();
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (InstantiationException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IllegalAccessException ex) {
                  Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
              }
       
       conn = DriverManager.getConnection(url,userName,password);
       System.out.println("Connected to the database");
       Statement st = null;
       st = conn.createStatement();
       st.executeQuery("use reader9db");
       System.out.println(user3);
       System.out.println(org);
        ResultSet rs = st.executeQuery("select start,end from high where username = '"+user3+"'and bookname = '"+org+"' and pagenum = '"+Integer.parseInt(jTextField2.getText())+"'");
       System.out.println(rs);
         while(rs.next())
                  {
                       System.out.println("kiran");
                       int s= Integer.parseInt(rs.getString("start"));
                       int e= Integer.parseInt(rs.getString("end"));
                       System.out.println(s+"asd"+e);
                        Highlighter h1 = jTextArea1.getHighlighter();
                        try {
                h1.addHighlight(s,e, DefaultHighlighter.DefaultPainter);
            } catch (BadLocationException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
                       //((DefaultListModel)jList2.getModel()).addElement(c);
                  }
          conn.close();    
             
         } catch (SQLException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
         }
      }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        ////<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       /* try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
        try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String p= "mn";
                new gui(p).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox bgcolor;
    private javax.swing.JButton bookmark;
    private javax.swing.JMenuItem close;
    private javax.swing.JButton dict;
    private javax.swing.JButton display;
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton fontch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton7;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JTextField meanining;
    private javax.swing.JMenuItem open;
    private javax.swing.JButton openlib;
    private javax.swing.JButton previous;
    private javax.swing.JButton print;
    private javax.swing.JMenuItem save;
    private javax.swing.JButton screenshot;
    private javax.swing.JTextField search;
    private javax.swing.JButton viewbk;
    private javax.swing.JButton zoomin;
    private javax.swing.JButton zoomout;
    // End of variables declaration//GEN-END:variables
}
